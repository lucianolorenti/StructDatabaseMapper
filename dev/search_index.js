var documenterSearchIndex = {"docs":
[{"location":"api.html#Api-1","page":"Api","title":"Api","text":"","category":"section"},{"location":"api.html#","page":"Api","title":"Api","text":"select_one\nselect_all\nupdate!\ndelete!\ndrop_table!\nclean_table!\nexists","category":"page"},{"location":"api.html#StructDatabaseMapping.select_one","page":"Api","title":"StructDatabaseMapping.select_one","text":"function select_one(mapper::DBMapper, T::Type{<:Model}; kwargs...)\n\nSelect one element from the database\n\nArguments\n\nmapper::DBMapper: The database mapper\nT::DataType: Datatype of a registered model we want to select\nkwargs: fields we want to search for. The param pk cand be used as generic way \n\nto identify the primary key of the struct\n\nstruct Author <: Model ... end\nselect_one(mapper, Author, name=\"Borges\")       \n\n\n\n\n\n","category":"function"},{"location":"api.html#StructDatabaseMapping.select_all","page":"Api","title":"StructDatabaseMapping.select_all","text":"select_all(mapper::DBMapper, T::Type{<:Model}; ; fields::Array{Symbol}=[], kwargs...)\n\nSelect all the elements that meet a criteria \n\nArguments\n\nmapper::DBMapper: The database mapper\nT::DataType: Datatype of a registered model we want to search for\nkwargs: criteria we want to search\n\nstruct Author <: Model ... end\nselect_all(mapper, Author, age=30)\n\n\n\n\n\n","category":"function"},{"location":"api.html#StructDatabaseMapping.update!","page":"Api","title":"StructDatabaseMapping.update!","text":"function update!(mapper::DBMapper, elem::T; fields::Array{Symbol}=Symbol[]) where T<:Model\n\nInsert the element in the database \n\nArguments\n\nmapper::DBMapper: The database mapper\nelem::T where T<:Model: Instantied model to insert\nfields::Array{Symbol}: Optional. Array of fields to update.\n\nstruct Author <: Model ... end\nauthor = Author(name=\"some name\", age=30)\nupdate!(mapper, author)       \nupdate!(mapper, author, fields=[:age])       \n\n\n\n\n\nfunction insert!(mapper::DBMapper, dbtype::Type{Relational}, elem::T) where T\n\nInsert the element in the database. Update the id of the element\n\n\n\n\n\n","category":"function"},{"location":"api.html#Base.delete!","page":"Api","title":"Base.delete!","text":"function delete!(mapper::DBMapper, T::Type{<:Model}; kwargs...)\n\nRemove elements from the database\n\nArguments\n\nmapper::DBMapper: The database mapper\nT::DataType: Datatype of a registered model we want to delete\nkwargs: fields we want to search for existence.\n\nstruct Author <: Model ... end\ndelete!(mapper, Author, name=\"some name\", age=30)\n\n\n\n\n\nfunction delete!(mapper::DBMapper, T::Type{<:Model}; kwargs...)\n\nRemove elements from the database\n\nArguments\n\nmapper::DBMapper: The database mapper\nelem<:Model: Element to delete\n\nThe element needs a valid identifier.\n\nstruct Author <: Model ... end\ndelete!(mapper, Author(id=valid_id, name=\"some name\", age=30))\n\n\n\n\n\n","category":"function"},{"location":"api.html#StructDatabaseMapping.drop_table!","page":"Api","title":"StructDatabaseMapping.drop_table!","text":"function drop_table!(mapper::DBMapper, T::DataType)\n\nEliminates (when possible) the struct data from the DB\n\nArguments\n\nmapper::DBMapper: The database mapper\nT::Type{<:Model}: Datatype of a registered model \n\n\n\n\n\n","category":"function"},{"location":"api.html#StructDatabaseMapping.clean_table!","page":"Api","title":"StructDatabaseMapping.clean_table!","text":"clean_table!(mapper::DBMapper, T::Type{<:Model})\n\nRemove all elements of the type T.\n\nArguments\n\nmapper::DBMapper: The database mapper\nT::Type{<:Model}: Datatype of a registered model \n\nIn cases when possible the structure where those elements are stored (tables in relational case)\n\n\n\n\n\n","category":"function"},{"location":"api.html#StructDatabaseMapping.exists","page":"Api","title":"StructDatabaseMapping.exists","text":"function exists(mapper::DBMapper, T::Type{T}; kwargs...) where T <: Model\n\nReturn wether the element exists in the database\n\nArguments\n\nmapper::DBMapper: The database mapper\nT::DataType: Datatype of a registered model we want to know their existence\nkwargs: fields we want to search for existence. The param pk cand be used as generic way \n\nto identify the primary key of the struct\n\nstruct Author <: Model ... end\nexists(mapper, Author, name=\"some name\", age=30)\n\n\n\n\n\nfunction exists(mapper::DBMapper, elem::T) where T<:Model\n\nReturn wether the element exists in the database\n\nArguments\n\nmapper::DBMapper: The database mapper\nelem<:Model: Element to determine its existence\n\nstruct Author <: Model ... end\nexists(mapper, Author(name=\"some name\", age=30))\n\n\n\n\n\n","category":"function"},{"location":"index.html#Index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"StructDatabaseMapping provides a handy way to store struct in databases. It handles relations, triggers and basic operations.","category":"page"},{"location":"index.html#Manual-Outline-1","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Pages = [\n    \"src/api.md\",\n    \"src/example.md\"\n]\nDepth = 1","category":"page"},{"location":"example.html#Example-1","page":"Example","title":"Example","text":"","category":"section"},{"location":"example.html#Let's-define-a-model-1","page":"Example","title":"Let's define a model","text":"","category":"section"},{"location":"example.html#","page":"Example","title":"Example","text":"This is a simple model. There are four new types to introduce: Model, ForeignKey, DBId and Foreign.","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"Model is the abstact type every struct to be persisted should inherit from\nForeignKey is a generic type that represents a reference to other Model\nDBId is other generic type that encodes the struct identifier.\nForeign is used as datatype in the constructor of a struct that contains a ForeignKey field. That datatype is bit of hack I don't like, but I couldn't find a  better way.","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"Each type <: Model must have a construcor with named parameters.","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"The DBMapper type is the main type of the library. The mapper is constructed with a function passed as an argument.","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"using StructDatabaseMapping\nusing Dates\nusing SQLite\nusing Test\n\nmutable struct Author <: Model\n    id::DBId{Integer}\n    name::String\n    age::Integer\n    date::DateTime\nend\nfunction Author(;id::Union{Integer, Nothing} = nothing,\n                name::String=\"\",\n                age::Integer=0,\n                date::DateTime=now())\n    return Author(id, name, age, date)\nend\nmutable struct Book <: Model\n    id::DBId{String}\n    author::ForeignKey{Author}\n    data::Dict{String, Integer}\nend\nfunction Book(;id::Union{String, Nothing}=nothing,\n               author::Foreign{Author}=Author(),\n               data::Dict{String, Integer}=Dict())\n    return Book(id, author, data)\nend\nnothing # hide","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"First we should create the DBMapper and register our types","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"DB_FILE = \"test_db\"\nusing SQLite\ncreator = ()->SQLite.DB(DB_FILE)\nmapper = DBMapper(creator)\n\nregister!(mapper, Author)\nregister!(mapper, Book)\n\nconfigure_relation(mapper, Book, :author, on_delete=Cascade())\n\n@test haskey(mapper.tables, Author)\n@test haskey(mapper.tables, Book)\n\ncreate_table(mapper, Author)\ncreate_table(mapper, Book)\nnothing # hide","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"author = Author(name=\"pirulo\", age=50)\ninsert!(mapper, author)\n@test !isnothing(getid(author, mapper))\nprintln(author)","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"id = getid(author, mapper)\na = select_one(mapper, Author, id=999)\nprintln(a)","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"a = select_one(mapper, Author, id=id)\nprintln(a)","category":"page"},{"location":"example.html#Existence-1","page":"Example","title":"Existence","text":"","category":"section"},{"location":"example.html#","page":"Example","title":"Example","text":"author = Author(name=\"Author 1\", age=2)\ninsert!(mapper, author)\n\nauthor = Author(name=\"Author 2\", age=3)\ninsert!(mapper, author)\n\nauthor = Author(name=\"Author 3\", age=4)\ninsert!(mapper, author)\n\nprintln(exists(mapper, Author, name=\"Enrique Banch\"))\nprintln(exists(mapper, Author, name=\"pirulo\"))\nprintln(exists(mapper, author))\n\nprintln(exists(mapper, Author, name=\"Author 3\", age=4))\nprintln(exists(mapper, Author, name=\"Author 3\", age=3))\nprintln(exists(mapper, Author, pk=author.id.x, age=3))\nprintln(exists(mapper, Author, pk=author.id.x, age=4))","category":"page"},{"location":"example.html#Update-1","page":"Example","title":"Update","text":"","category":"section"},{"location":"example.html#","page":"Example","title":"Example","text":"the function update! receives a named argument fields that indicates the fields to be updated","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"a.name = \"otro_pirulo\"\na.age = 5\nupdate!(mapper, a; fields=[:name])\na = select_one(mapper, Author, id=id)\nprintln(a)","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"If fields is omitted all the fields are updated","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"a.name = \"some_other_name\"\na.age = 5\nupdate!(mapper, a)\na = select_one(mapper, Author, id=id)\nprintln(a)","category":"page"},{"location":"example.html#Insert-element-with-foreign-key-and-dict-1","page":"Example","title":"Insert element with foreign key and dict","text":"","category":"section"},{"location":"example.html#","page":"Example","title":"Example","text":"book = Book(id=\"super_string_id\", author=author, \n            data=Dict{String, Integer}(\"some_data\"=>5))\ninsert!(mapper, book)","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"book = select_one(mapper, Book, id=\"bbb\")\nprintln(book)","category":"page"},{"location":"example.html#","page":"Example","title":"Example","text":"book = select_one(mapper, Book, id=\"super_string_id\")\nprintln(book)","category":"page"},{"location":"example.html#Delete-1","page":"Example","title":"Delete","text":"","category":"section"},{"location":"example.html#","page":"Example","title":"Example","text":"book = select_one(mapper, Book, id=\"super_string_id\")\ndelete!(mapper, book)","category":"page"},{"location":"example.html#Removing-tables-1","page":"Example","title":"Removing tables","text":"","category":"section"},{"location":"example.html#","page":"Example","title":"Example","text":"drop_table!(mapper, Author)\ndrop_table!(mapper, Book)","category":"page"}]
}
